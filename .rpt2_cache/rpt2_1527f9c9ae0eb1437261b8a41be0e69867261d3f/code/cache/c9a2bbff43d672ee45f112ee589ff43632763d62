{"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/sources/index.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAMzC,IAAM,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,UAAC,KAAU,EAAE,GAAW;IAC9D,IAAM,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IAClD,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACtD,MAAM,GAAG,MAAM,CAAC;KACnB;IACD,OAAO,MAAM,GAAG,MAAM,CAAC;AAC3B,CAAC,CAAC,CAAC;AAEH,IAAM,GAAG,wBACF,YAAY,CAClB,CAAC;AAEF,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;IACpC,OAAO;QACH,OAAO,EAAE;YACL,MAAM,EAAE,KAAK;YACb,IAAI,MAAA;SACP;QACD,QAAQ,EAAE,UAAC,SAAc,EAAE,QAAa,EAAG,UAAe;YACtD,OAAO;gBACH,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC/B,UAAU,EAAE,GAAG;aAClB,CAAC;QACN,CAAC;KACJ,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,eAAe,KAAK,CAAC\"}","code":"import * as tslib_1 from \"tslib\";\r\nimport * as _ from \"lodash\";\r\nimport jsonMocks from \"./../mocks/index\";\r\nvar getPathMocks = _.mapKeys(jsonMocks, function (value, key) {\r\n    var origin = _.get(value, \"origin\", \"/unknown\");\r\n    var suffix = \"\";\r\n    if (!origin.endsWith(\"/get\") && !origin.endsWith(\"/set\")) {\r\n        suffix = \"/get\";\r\n    }\r\n    return origin + suffix;\r\n});\r\nvar map = tslib_1.__assign({}, getPathMocks);\r\nvar mocks = Object.keys(map).map(function (path) {\r\n    return {\r\n        request: {\r\n            method: \"GET\",\r\n            path: path,\r\n        },\r\n        response: function (urlParams, qsParams, bodyParams) {\r\n            return {\r\n                body: JSON.stringify(map[path]),\r\n                statusCode: 200,\r\n            };\r\n        },\r\n    };\r\n});\r\nexport default mocks;\r\n//# sourceMappingURL=index.js.map","dts":{"name":"/Users/tonimoeckel/Development/prisma-pro-api-simulation/dist/types/sources/index.d.ts","writeByteOrderMark":false,"text":"declare const mocks: {\r\n    request: {\r\n        method: string;\r\n        path: string;\r\n    };\r\n    response: (urlParams: any, qsParams: any, bodyParams: any) => {\r\n        body: string;\r\n        statusCode: number;\r\n    };\r\n}[];\r\nexport default mocks;\r\n"}}
