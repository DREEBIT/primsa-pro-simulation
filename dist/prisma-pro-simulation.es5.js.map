{"version":3,"file":"prisma-pro-simulation.es5.js","sources":["../src/mocks/index.ts","../src/sources/index.ts","../src/index.ts"],"sourcesContent":["import * as fs from \"fs\";\nimport * as glob from \"glob\";\nimport * as path from \"path\";\n\nconst files = glob.sync(path.resolve(__filename + \"/../*.json\"))\n    .reduce((acc: any, filepath: string) => {\n        const fileData = fs.readFileSync(filepath, \"utf8\");\n\n        let json = null;\n        try {\n            json = JSON.parse(fileData);\n        } catch (e) {\n            console.warn(\"JSON not valid\", filepath);\n        }\n        if (json) {\n            let filename = filepath.split(\"/\").pop();\n            if (filename) {\n                filename = filename.replace(\".json\", \"\");\n            } else {\n                filename = \"default\";\n            }\n            acc[filename] = json;\n        }\n\n        return acc;\n    }, {});\n\nexport default files;\n","import * as _ from \"lodash\";\nimport jsonMocks from \"./../mocks/index\";\n\ninterface IMockMap {\n    [s: string]: any;\n}\n\nconst getPathMocks = _.mapKeys(jsonMocks, (value: any, key: string) => {\n    const origin = _.get(value, \"origin\", \"/unknown\");\n    let suffix = \"\";\n    if (!origin.endsWith(\"/get\") && !origin.endsWith(\"/set\")) {\n        suffix = \"/get\";\n    }\n    return origin + suffix;\n});\n\nconst map: IMockMap = {\n    ...getPathMocks,\n};\n\nconst mocks = Object.keys(map).map((path) => {\n    return {\n        request: {\n            method: \"GET\",\n            path,\n        },\n        response: (urlParams: any, qsParams: any , bodyParams: any) => {\n            return {\n                body: JSON.stringify(map[path]),\n                statusCode: 200,\n            };\n        },\n    };\n});\n\nexport default mocks;\n","import { serverStart } from \"express-mock-server\";\nimport * as _ from \"lodash\";\nimport sources from \"./sources\";\n\n\n\nconst init = (configArg: {\n  port?: number,\n  controlApiUrl?: string,\n}) => {\n\n  const config = _.defaults(configArg, {\n    controlApiUrl: \"/mmsp\",\n    port: 8000,\n  });\n\n  return serverStart([sources], config);\n\n};\n\nexport default init;\n"],"names":["glob.sync","path.resolve","fs.readFileSync","_.mapKeys","jsonMocks","_.get","_.defaults","sources"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAM,KAAK,GAAGA,IAAS,CAACC,OAAY,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;KAC3D,MAAM,CAAC,UAAC,GAAQ,EAAE,QAAgB;IAC/B,IAAM,QAAQ,GAAGC,YAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAEnD,IAAI,IAAI,GAAG,IAAI,CAAC;IAChB,IAAI;QACA,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAC/B;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;KAC5C;IACD,IAAI,IAAI,EAAE;QACN,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;QACzC,IAAI,QAAQ,EAAE;YACV,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;SAC5C;aAAM;YACH,QAAQ,GAAG,SAAS,CAAC;SACxB;QACD,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;KACxB;IAED,OAAO,GAAG,CAAC;CACd,EAAE,EAAE,CAAC,CAAC;;AClBX,IAAM,YAAY,GAAGC,OAAS,CAACC,KAAS,EAAE,UAAC,KAAU,EAAE,GAAW;IAC9D,IAAM,MAAM,GAAGC,GAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;IAClD,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACtD,MAAM,GAAG,MAAM,CAAC;KACnB;IACD,OAAO,MAAM,GAAG,MAAM,CAAC;CAC1B,CAAC,CAAC;AAEH,IAAM,GAAG,gBACF,YAAY,CAClB,CAAC;AAEF,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI;IACpC,OAAO;QACH,OAAO,EAAE;YACL,MAAM,EAAE,KAAK;YACb,IAAI,MAAA;SACP;QACD,QAAQ,EAAE,UAAC,SAAc,EAAE,QAAa,EAAG,UAAe;YACtD,OAAO;gBACH,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC/B,UAAU,EAAE,GAAG;aAClB,CAAC;SACL;KACJ,CAAC;CACL,CAAC,CAAC;;AC3BH,IAAM,IAAI,GAAG,UAAC,SAGb;IAEC,IAAM,MAAM,GAAGC,QAAU,CAAC,SAAS,EAAE;QACnC,aAAa,EAAE,OAAO;QACtB,IAAI,EAAE,IAAI;KACX,CAAC,CAAC;IAEH,OAAO,WAAW,CAAC,CAACC,KAAO,CAAC,EAAE,MAAM,CAAC,CAAC;CAEvC,CAAC;;;;"}