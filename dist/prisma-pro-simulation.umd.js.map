{"version":3,"file":"prisma-pro-simulation.umd.js","sources":["../src/mocks/index.ts","../src/sources/index.ts","../src/index.ts"],"sourcesContent":["import * as fs from \"fs\";\nimport * as glob from \"glob\";\nimport * as path from \"path\";\n\nconst files = glob.sync(path.resolve(__filename + \"/../*.json\"))\n    .reduce((acc: any, filepath: string) => {\n        const fileData = fs.readFileSync(filepath, \"utf8\");\n\n        let json = null;\n        try {\n            json = JSON.parse(fileData);\n        } catch (e) {\n            console.warn(\"JSON not valid\", filepath);\n        }\n        if (json) {\n            let filename = filepath.split(\"/\").pop();\n            if (filename) {\n                filename = filename.replace(\".json\", \"\");\n            } else {\n                filename = \"default\";\n            }\n            acc[filename] = json;\n        }\n\n        return acc;\n    }, {});\n\nexport default files;\n","import * as _ from \"lodash\";\nimport jsonMocks from \"./../mocks/index\";\n\ninterface IMockMap {\n    [s: string]: any;\n}\n\nconst getPathMocks = _.mapKeys(jsonMocks, (value: any, key: string) => {\n    const origin = _.get(value, \"origin\", \"/unknown\");\n    let suffix = \"\";\n    if (!origin.endsWith(\"/get\") && !origin.endsWith(\"/set\")) {\n        suffix = \"/get\";\n    }\n    return origin + suffix;\n});\n\nconst map: IMockMap = {\n    ...getPathMocks,\n};\n\nconst mocks = Object.keys(map).map((path) => {\n    return {\n        request: {\n            method: \"GET\",\n            path,\n        },\n        response: (urlParams: any, qsParams: any , bodyParams: any) => {\n            return {\n                body: JSON.stringify(map[path]),\n                statusCode: 200,\n            };\n        },\n    };\n});\n\nexport default mocks;\n","import { serverStart } from \"express-mock-server\";\nimport * as _ from \"lodash\";\nimport sources from \"./sources\";\n\n\n\nconst init = (configArg: {\n  port?: number,\n  controlApiUrl?: string,\n}) => {\n\n  const config = _.defaults(configArg, {\n    controlApiUrl: \"/mmsp\",\n    port: 8000,\n  });\n\n  return serverStart([sources], config);\n\n};\n\nexport default init;\n"],"names":["glob.sync","path.resolve","fs.readFileSync","_.mapKeys","jsonMocks","_.get","path","_.defaults","serverStart","sources"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAIA,IAAM,KAAK,GAAGA,SAAS,CAACC,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;SAC3D,MAAM,CAAC,UAAC,GAAQ,EAAE,QAAgB;QAC/B,IAAM,QAAQ,GAAGC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAEnD,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI;YACA,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SAC/B;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;SAC5C;QACD,IAAI,IAAI,EAAE;YACN,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;YACzC,IAAI,QAAQ,EAAE;gBACV,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;aAC5C;iBAAM;gBACH,QAAQ,GAAG,SAAS,CAAC;aACxB;YACD,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;SACxB;QAED,OAAO,GAAG,CAAC;IACf,CAAC,EAAE,EAAE,CAAC,CAAC;;IClBX,IAAM,YAAY,GAAGC,SAAS,CAACC,KAAS,EAAE,UAAC,KAAU,EAAE,GAAW;QAC9D,IAAM,MAAM,GAAGC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAClD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACtD,MAAM,GAAG,MAAM,CAAC;SACnB;QACD,OAAO,MAAM,GAAG,MAAM,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,IAAM,GAAG,gBACF,YAAY,CAClB,CAAC;IAEF,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,UAACC,OAAI;QACpC,OAAO;YACH,OAAO,EAAE;gBACL,MAAM,EAAE,KAAK;gBACb,IAAI,SAAA;aACP;YACD,QAAQ,EAAE,UAAC,SAAc,EAAE,QAAa,EAAG,UAAe;gBACtD,OAAO;oBACH,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAACA,OAAI,CAAC,CAAC;oBAC/B,UAAU,EAAE,GAAG;iBAClB,CAAC;aACL;SACJ,CAAC;IACN,CAAC,CAAC,CAAC;;IC3BH,IAAM,IAAI,GAAG,UAAC,SAGb;QAEC,IAAM,MAAM,GAAGC,UAAU,CAAC,SAAS,EAAE;YACnC,aAAa,EAAE,OAAO;YACtB,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QAEH,OAAOC,6BAAW,CAAC,CAACC,KAAO,CAAC,EAAE,MAAM,CAAC,CAAC;IAExC,CAAC,CAAC;;;;;;;;"}